components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT authorization header. Use `Bearer <token>` format.
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        name:
          type: string
        role:
          type: string
          enum:
            - user
            - admin
            - secretary
            - notary
        citizenId:
          type: string
        phoneNumber:
          type: string
        address:
          type: object
          properties:
            province:
              type: string
            district:
              type: string
            town:
              type: string
            street:
              type: string
      example:
        id: 5ebac534954b54139806c112
        email: fake@example.com
        name: fake name
        role: user
        citizenId: 0123456789
        phoneNumber: 0998877665
        adress: xx Street A
    Token:
      type: object
      properties:
        token:
          type: string
        expires:
          type: string
          format: date-time
      example:
        token: >-
          eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWJhYzUzNDk1NGI1NDEzOTgwNmMxMTIiLCJpYXQiOjE1ODkyOTg0ODQsImV4cCI6MTU4OTMwMDI4NH0.m1U63blB0MLej_WfB7yC2FTMnCziif9X8yzwDEfJXAg
        expires: '2020-05-12T16:18:04.793Z'
    AuthTokens:
      type: object
      properties:
        access:
          $ref: '#/components/schemas/Token'
        refresh:
          $ref: '#/components/schemas/Token'
    Error:
      type: object
      properties:
        code:
          type: number
        message:
          type: string
    Notarizations:
      type: object
      properties:
        files:
          type: array
          items:
            type: object
            properties:
              filename:
                type: string
              firebaseUrl:
                type: string
        notaryService:
          $ref: '#/components/schemas/NotarizationService'
        notaryField:
          $ref: '#/components/schemas/NotarizationField'
        requesterInfo:
          type: object
          properties:
            fullName:
              type: string
            citizenId:
              type: string
            phoneNumber:
              type: string
            email:
              type: string
        userId:
          type: string
        createdAt:
          type: string
          format: date-time
        amount:
          type: number
          format: float
        status:
          type: object
          enum:
            - pending
            - processing
            - verification
            - digitalSignature
            - completed
            - rejected
          createdAt:
            type: string
            format: date-time
          status:
            type: string
    Session:
      type: object
      properties:
        sessionId:
          type: string
        notaryField:
          $ref: '#/components/schemas/NotarizationField'
        notaryService:
          $ref: '#/components/schemas/NotarizationService'
        sessionName:
          type: string
        startTime:
          type: string
        startDate:
          type: string
          format: date
        endTime:
          type: string
        endDate:
          type: string
          format: date
        users:
          type: array
          items:
            type: object
            properties:
              email:
                type: string
              status:
                type: string
                enum:
                  - pending
                  - accepted
                  - rejected
        createdBy:
          type: string
          format: objectId
      example:
        sessionId: 5ebac534954b54139806c112
        notaryField:
          name: Notary Field 1
        notaryService:
          name: Notary Service 1
        sessionName: Session 1
        startTime: '10:00'
        startDate: '2024-05-12'
        endTime: '11:00'
        endDate: '2024-05-12'
        users:
          - email: user1@example.com
            status: pending
          - email: user2@example.com
            status: accepted
        createdBy: 5ebac534954b54139806c112
    Role:
      type: object
      properties:
        name:
          type: string
        permissions:
          type: array
          items:
            type: string
      example:
        name: user
        permissions:
          - viewNotarizationHistory
          - uploadDocuments
    NotarizationField:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier for a notarization field.
        name:
          type: string
          description: The name of the notarization field.
        description:
          type: string
          description: A brief description of the notarization field.
        name_en:
          type: string
          description: The name of the notarization field in English.
        code:
          type: string
          description: A unique code for the notarization field.
      required:
        - id
        - name
      example:
        id: '12345'
        name: Notarization Field Example
        description: This is an example description for the notarization field.
        name_en: Notarization Field Example
        code: '12345'
    NotarizationService:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the notarization service
        name:
          type: string
          description: Name of the notarization service
        fieldId:
          type: string
          description: ID of the associated notarization field
          example: 5f2b2b23c3a2b16f2e143b67
        description:
          type: string
          description: Description of the notarization service
        price:
          type: number
          format: float
          description: Price of the notarization service
        code:
          type: string
          description: Unique code for the notarization service
        required_documents:
          type: array
          items:
            type: string
          description: List of required documents for the notarization service
      required:
        - name
        - fieldId
        - description
        - price
      example:
        id: '12345'
        name: Notarization Service Example
        fieldId: 5f2b2b23c3a2b16f2e143b67
        description: This is an example of a notarization service.
        price: 10000
        code: '12345'
        required_documents:
          - Document 1
          - Document 2
    Payment:
      type: object
      required:
        - orderCode
        - amount
        - description
        - returnUrl
        - cancelUrl
      properties:
        id:
          type: string
          description: Unique identifier for the payment
        orderCode:
          type: string
          description: Unique code for the order
        amount:
          type: number
          description: Payment amount
        description:
          type: string
          description: Payment description
        returnUrl:
          type: string
          description: URL to redirect after payment completion
        cancelUrl:
          type: string
          description: URL to redirect if payment is cancelled
        checkoutUrl:
          type: string
          description: URL for the payment checkout
        status:
          type: string
          enum:
            - pending
            - success
            - failed
            - cancelled
          default: pending
          description: Payment status
        userId:
          type: string
          description: ID of the user who made the payment
        createdAt:
          type: string
          format: date-time
          description: Timestamp of payment creation
        updatedAt:
          type: string
          format: date-time
          description: Timestamp of the last update
      UserWallet:
        type: object
        properties:
          user:
            type: string
            description: The ID of the user who owns the wallet.
          nftItems:
            type: array
            items:
              type: object
              properties:
                transactionHash:
                  type: string
                  description: The unique transaction hash.
                filename:
                  type: string
                  description: The filename associated with the NFT.
                amount:
                  type: number
                  description: The amount of NFTs.
                tokenId:
                  type: string
                  description: The token ID of the NFT.
                tokenURI:
                  type: string
                  description: The URI of the token.
                contractAddress:
                  type: string
                  description: The contract address of the NFT.
                mintedAt:
                  type: string
                  format: date-time
                  description: The date and time when the NFT was minted.
        Sessions:
          type: object
          properties:
            user:
              type: string
              description: The ID of the user who owns the wallet.
            sessions:
              type: array
              items:
                type: object
                properties:
                  sessionId:
                    type: string
                    description: The ID of the session.
                  notaryField:
                    type: object
                    $ref: '#/components/schemas/NotarizationField'
                  notaryService:
                    type: object
                    $ref: '#/components/schemas/NotarizationService'
                  sessionName:
                    type: string
                    description: The name of the session.
                  startTime:
                    type: string
                    description: The start time of the session.
                  startDate:
                    type: string
                    format: date
                    description: The start date of the session.
                  endTime:
                    type: string
                    description: The end time of the session.
                  endDate:
                    type: string
                    format: date
                    description: The end date of the session.
                  users:
                    type: array
                    items:
                      type: object
                      properties:
                        email:
                          type: string
                          description: The email of the user.
                        status:
                          type: string
                          enum:
                            - pending
                            - accepted
                            - rejected
                          description: The status of the user.
                  createdBy:
                    type: string
                    description: The ID of the user who created the session.
                  createdAt:
                    type: string
                    format: date-time
                    description: The date and time when the session was created.
          createdAt:
            type: string
            format: date-time
            description: The date and time when the wallet was created.
        example:
          user: 5ebac534954b54139806c112
          nftItems:
            - transactionHash: '0x1234567890abcdef'
              filename: 'nft_image.png'
              amount: 1
              tokenId: '1'
              tokenURI: 'https://example.com/nft/1'
              contractAddress: '0xabcdef1234567890'
              mintedAt: '2023-10-01T12:00:00Z'
          createdAt: '2023-10-01T12:00:00Z'
  responses:
    DuplicateEmail:
      description: Email already taken
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 400
            message: Email already taken
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 401
            message: Please authenticate
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 403
            message: Forbidden
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 404
            message: Not found
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 400
            message: Bad request
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 500
            message: Internal server error
